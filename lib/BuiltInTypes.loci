__primitive null_t { }

__primitive bool {
	bool implicitCopy();
	
	bool not();
}

__primitive char {
	char implicitCopy();
	
	int compare(char v);
	
	bool isZero();
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive short {
	short implicitCopy();
	
	short abs();

	short add(short v);
	short subtract(short v);
	short multiply(short v);
	short divide(short v);
	short modulo(short v);
	
	int compare(short v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive int {
	static Default();	
	
	int implicitCopy();
	
	int abs();

	int add(int v);
	int subtract(int v);
	int multiply(int v);
	int divide(int v);
	int modulo(int v);
	
	int compare(int v);
	bool isZero();
	bool isPositive();
	bool isNegative();
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive long {
	long implicitCopy();
	
	long abs();

	long add(long v);
	long subtract(long v);
	long multiply(long v);
	long divide(long v);
	long modulo(long v);
	
	int compare(long v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive float {
	float implicitCopy();

	float abs();

	float add(float v);
	float subtract(float v);
	float multiply(float v);
	float divide(float v);
	float modulo(float v);
	
	int compare(float v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive double {
	double implicitCopy();
	
	double abs();

	double add(double v);
	double subtract(double v);
	double multiply(double v);
	double divide(double v);
	double modulo(double v);
	
	int compare(double v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

template <typename T>
__primitive ptr {
	static Null();
	
	ptr<T> implicitCopy();
	
	lval<T> value_lval<T>& deref();
	
	lval<T> value_lval<T>& index(int index);
}

template <typename T>
__primitive value_lval {
	static Default(T value);
	T* address();
	void assign(T value);
	T& dissolve();
	T move();
}

/*
Eventually the following will be adopted for use (once compile-time evaluation
has been implemented). For now, this stuff is still built-in to the compiler.

template <virtual typename T>
__primitive ref {
	ref<T> implicitCopy();
	T implicitDeepCopy();
	
	do (synthesizer) {
		// Add any methods from the referred-to type
		// that aren't part of this type.
		for (auto method: T.dynamic_methods()) {
			if (synthesizer.has_dynamic_method(method.name())) break;
			synthesizer.add_dynamic_method(method.returnType(), method.name(), method.argTypes());
		}
	}
}

__primitive method {
	typename returnType() const;
	typename[] paramTypes() const;
}

interface None { }

template <virtual typename Constraint = None>
__primitive typename {
	bool has_static_method(string name) const;
	method get_static_method(string name) const;
	
	bool has_dynamic_method(string name) const;
	method get_dynamic_method(string name) const;
	
	do (synthesizer) {
		// 'call' calls the default constructor, if any exists.
		if (!Constraint.has_static_method("default")) break;
		auto method = Constraint.get_static_method("default");
		synthesizer.add_dynamic_method(method.returnType(), "call", method.argTypes());
	}
	
	do (synthesizer) {
		// All constructors can be called by
		// name, as methods of this object.
		for (auto method: Constraint.static_methods()) {
			if (synthesizer.has_method(method.name())) break;
			synthesizer.add_dynamic_method(method.returnType(), method.name(), method.argTypes());
		}
	}
}

template <virtual typename Constraint = None>
__primitive virtual_typename {
	bool has_static_method(string name) const;
	method get_static_method(string name) const;
	
	bool has_dynamic_method(string name) const;
	method get_dynamic_method(string name) const;
}

template <typename T, typename Ret, typename[] Param>
class interface_method(T* objectPtr, void* vtable, uint32_t value) {
	static Default(T* objectPtr, void* vtable, uint32_t value) {
		return @(objectPtr, vtable, value);
	}
	
	interface_method<T, Ret, Param> implicitCopy() const {
		return interface_method(@objectPtr, @vtable, @value);
	}
	
	Ret call(Param args[]) const {
		auto vtableArray = static_array<void *>(@vtable);
		auto f = function_ptr<Ret, {T*} + Param>(
		f(@objectPtr, args);
	}
}*/


