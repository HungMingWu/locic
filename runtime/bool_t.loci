__primitive bool {
	bool implicit_copy() const noexcept;
	bool copy() const noexcept;
	
	bool equal(const bool& v) const noexcept;
	bool not_equal(const bool& v) const noexcept;
	
	compare_result_t compare(const bool& v) const noexcept;
	
	bool not() const noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_bool_t {
	static T implicit_cast_bool_t(bool value) noexcept;
}

template <typename T : movable>
interface __cast_from_bool_t {
	static T cast_bool_t(bool value) noexcept;
}

template <typename T: __implicit_cast_from_bool_t<T>>
T bool::implicitCast() const noexcept require(T : movable) {
	return T.implicit_cast_bool_t(self);
}

template <typename T: __cast_from_bool_t<T>>
T bool::cast() const noexcept require(T : movable) {
	return T.cast_bool_t(self);
}
