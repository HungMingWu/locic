// Chain Reversi Board.

import void* malloc(size_t size) noexcept;
import void free(void* ptr) noexcept;

// TODO: replace this with actual standard library.
namespace std {

	template <typename T>
	interface counter_type {
		T implicitCopy() const noexcept;
		
		compare_result_t compare(const T& value) const noexcept;
		
		T add(const T& value) const noexcept;
	}
	
	template <typename T: counter_type<T>>
	class counter (T increment, T begin, T end) {
		static Create = default;
		
		T front() noexcept {
			return @begin;
		}
		
		void popFront() noexcept {
			@begin += @increment;
		}
		
		bool empty() noexcept {
			return @begin >= @end;
		}
	}
	
	template <typename T: counter_type<T>>
	class counter_incl (T increment, T begin, T end) {
		static Create = default;
		
		T front() noexcept {
			return @begin;
		}
		
		void popFront() noexcept {
			@begin += @increment;
		}
		
		bool empty() noexcept {
			return @begin > @end;
		}
	}

}

namespace CR {

	datatype Position(size_t x, size_t y);
	datatype BoardSize(size_t width, size_t height);
	
	class Board (std::varray<Value> data, Value currentPlayer, BoardSize size) {
		static Create(BoardSize size, Value initialPlayer) {
			auto data = std::varray<Value>();
			
			for (auto p: std::counter<size_t>(1u, 0u, size.width * size.height)) {
				data.push_back(Empty());
			}
			
			return @(move data, initialPlayer, size);
		}
		
		Board copy() const {
			auto data = std::varray<Value>();
			
			for (auto p: std::counter<size_t>(1u, 0u, @size.width * @size.height)) {
				data.push_back(@data[p]);
			}
			
			return @(move data, @currentPlayer, @size);
		}
		
		bool isValid(Position position) const noexcept {
			if (self[position] != Empty()) {
				return false;
			}
			
			for (auto xi: std::counter_incl<ssize_t>(1, -1, 1)) {
				for (auto yi: std::counter_incl<ssize_t>(1, -1, 1)) {
					if (xi == 0 && yi == 0) {
						continue;
					}
					
					if (isValidForDirection(self, position.x, position.y, xi, yi)) {
						return true;
					}
				}
			}
			
			return false;
		}
		
		void placeMove(Position position) noexcept {
			self[position] = self.player();
			
			self.update();
			
			@currentPlayer = self.opponent();
		}
		
		Value player() const noexcept {
			return @currentPlayer;
		}
		
		Value opponent() const noexcept {
			return opposite(@currentPlayer);
		}
		
		BoardSize size() const noexcept {
			return @size;
		}
		
		bool isComplete() const noexcept {
			for (auto x: std::counter<size_t>(1u, 0u, @size.width)) {
				for (auto y: std::counter<size_t>(1u, 0u, @size.height)) {
					if (self.isValid(Position(x, y))) {
						return false;
					}
				}
			}
			
			return true;
		}
		
		lval<Value> ptr_lval<Value> index(Position position) const noexcept {
			return @data[position.x + position.y * @size.width];
		}
		
		void update() noexcept {
			bool hasChanged = true;
			
			while (hasChanged) {
				hasChanged = false;
				
				for (auto x: std::counter<size_t>(1u, 0u, @size.width)) {
					for (auto y: std::counter<size_t>(1u, 0u, @size.height)) {
						if (self[Position(x, y)] != self.player()) {
							continue;
						}
						
						for (auto xi: std::counter_incl<ssize_t>(1, -1, 1)) {
							for (auto yi: std::counter_incl<ssize_t>(1, -1, 1)) {
								if (xi == 0 && yi == 0) {
									continue;
								}
								
								if (updateForDirection(self, x, y, xi, yi)) {
									hasChanged = true;
								}
							}
						}
					}
				}
			}
		}
		
	}
	
	bool isValidForDirection(const Board& board, size_t x, size_t y, ssize_t xi, ssize_t yi) noexcept {
		bool flagOpponent = false;
		
		ssize_t cx = x.signedValue() + xi;
		ssize_t cy = y.signedValue() + yi;
		
		while (cx >= 0 && cx < board.size().width.signedValue() && cy >= 0 && cy < board.size().height.signedValue()) {
			final const auto position = Position(cx.unsignedValue(), cy.unsignedValue());
			
			if (board[position] == board.opponent()) {
				flagOpponent = true;
				cx += xi;
				cy += yi;
			} else {
				if (flagOpponent && board[position] == board.player()) {
					return true;
				} else {
					break;
				}
			}
		}
		
		return false;
	}
	
	bool updateForDirection(Board& board, size_t x, size_t y, ssize_t xi, ssize_t yi) noexcept {
		if (!isValidForDirection(board, x, y, xi, yi)) {
			return false;
		}
		
		ssize_t cx = x.signedValue() + xi;
		ssize_t cy = y.signedValue() + yi;
		
		while (cx >= 0 && cx < board.size().width.signedValue() && cy >= 0 && cy < board.size().height.signedValue()) {
			final const auto position = Position(cx.unsignedValue(), cy.unsignedValue());
			
			if (board[position] == board.opponent()) {
				board[position] = board.player();
				cx += xi;
				cy += yi;
			} else {
				break;
			}
		}
		
		return true;
	}
	
}

