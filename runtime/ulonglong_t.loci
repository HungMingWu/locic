template <typename T>
interface __implicit_cast_from_ulonglong_t {
	static T implicit_cast_ulonglong_t(ulonglong_t value) noexcept;
}

template <typename T>
interface __cast_from_ulonglong_t {
	static T cast_ulonglong_t(ulonglong_t value) noexcept;
}

__primitive ulonglong_t {
	static ulonglong_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ulonglong_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static ulonglong_t implicit_cast_uint32_t(uint32_t value) noexcept;
	static ulonglong_t implicit_cast_uint64_t(uint64_t value) noexcept;
	static ulonglong_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	static ulonglong_t implicit_cast_ushort_t(ushort_t value) noexcept;
	static ulonglong_t implicit_cast_uint_t(uint_t value) noexcept;
	static ulonglong_t implicit_cast_ulong_t(ulong_t value) noexcept;
	
	static ulonglong_t cast_uint8_t(uint8_t value) noexcept;
	static ulonglong_t cast_uint16_t(uint16_t value) noexcept;
	static ulonglong_t cast_uint32_t(uint32_t value) noexcept;
	static ulonglong_t cast_uint64_t(uint64_t value) noexcept;
	static ulonglong_t cast_ubyte_t(ubyte_t value) noexcept;
	static ulonglong_t cast_ushort_t(ushort_t value) noexcept;
	static ulonglong_t cast_uint_t(uint_t value) noexcept;
	static ulonglong_t cast_ulong_t(ulong_t value) noexcept;
	static ulonglong_t cast_size_t(size_t value) noexcept;
	
	ulonglong_t implicit_copy() const noexcept;
	ulonglong_t copy() const noexcept;
	
	template <typename T: __implicit_cast_from_ulonglong_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ulonglong_t<T>>
	T cast() const noexcept;
	
	ulonglong_t add(const ulonglong_t& v) const noexcept;
	ulonglong_t subtract(const ulonglong_t& v) const noexcept;
	ulonglong_t multiply(const ulonglong_t& v) const noexcept;
	ulonglong_t divide(const ulonglong_t& v) const noexcept;
	ulonglong_t modulo(const ulonglong_t& v) const noexcept;
	
	bool equal(const ulonglong_t& v) const noexcept;
	bool not_equal(const ulonglong_t& v) const noexcept;
	bool less_than(const ulonglong_t& v) const noexcept;
	bool less_than_or_equal(const ulonglong_t& v) const noexcept;
	bool greater_than(const ulonglong_t& v) const noexcept;
	bool greater_than_or_equal(const ulonglong_t& v) const noexcept;
	
	compare_result_t compare(const ulonglong_t& v) const noexcept;
	
	bool isZero() const noexcept;
}
