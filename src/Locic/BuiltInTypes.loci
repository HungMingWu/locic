__primitive null_t { }

__primitive bool {
	bool implicitCopy();
	
	bool opNot();
}

__primitive char {
	char implicitCopy();
	
	int opCompare(char v);
	
	bool isZero();
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive short {
	short implicitCopy();
	
	short abs();

	short opAdd(short v);
	short opSubtract(short v);
	short opMultiply(short v);
	short opDivide(short v);
	short opModulo(short v);
	
	int opCompare(short v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive int {
	static Default();	
	
	int implicitCopy();
	
	int abs();

	int opAdd(int v);
	int opSubtract(int v);
	int opMultiply(int v);
	int opDivide(int v);
	int opModulo(int v);
	
	int opCompare(int v);
	bool isZero();
	bool isPositive();
	bool isNegative();
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive long {
	long implicitCopy();
	
	long abs();

	long opAdd(long v);
	long opSubtract(long v);
	long opMultiply(long v);
	long opDivide(long v);
	long opModulo(long v);
	
	int opCompare(long v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive float {
	float implicitCopy();

	float abs();

	float opAdd(float v);
	float opSubtract(float v);
	float opMultiply(float v);
	float opDivide(float v);
	float opModulo(float v);
	
	int opCompare(float v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

__primitive double {
	double implicitCopy();
	
	double abs();

	double opAdd(double v);
	double opSubtract(double v);
	double opMultiply(double v);
	double opDivide(double v);
	double opModulo(double v);
	
	int opCompare(double v);
	
	/*char toChar();
	short toShort();
	int toInt();
	long toLong();
	float toFloat();
	double toDouble();*/
}

template <typename T>
__primitive ptr {
	static Null();
	
	ptr<T> implicitCopy();
	
	value_lval<T>& opDeref();
	
	value_lval<T>& opIndex(int index);
}

template <typename T>
__primitive value_lval {
	static Default(T value);
	T* opAddress();
	void opAssign(T value);
	T& opDissolve();
	T opMove();
}

/*template <typename T, typename Ret, typename[] Param>
class interface_method(T* objectPtr, void* vtable, uint32_t value) {
	static Default(T* objectPtr, void* vtable, uint32_t value){
		return @(objectPtr, vtable, value);
	}
	
	interface_method<T, Ret, Param> implicitCopy() const {
		return interface_method(@objectPtr, @vtable, @value);
	}
	
	Ret opCall(Param args[]) const {
		auto vtableArray = static_array<void *>(@vtable);
		auto f = function_ptr<Ret, {T*} + Param>(
		f(@objectPtr, args);
	}
}*/


