__primitive integer_literal_t {
	// integer_literal_t implicitCopy() const;
	
	/*
	To be used when templated methods are supported:
	
	template <typename T: ...>
	T implicitCast() const {
		return T.integer_literal(implicitCopy());
	}
	*/
}

__primitive float_literal_t {
	// float_literal_t implicitCopy() const;
	
	/*
	To be used when templated methods are supported:
	
	template <typename T: ...>
	T implicitCast() const {
		return T.float_literal(implicitCopy());
	}
	*/
}

__primitive null_t { }

__primitive bool {
	bool implicitCopy() const;
	
	bool not() const;
}

__primitive char_t {
	static char_t integer_literal(integer_literal_t literal);
	
	char_t implicitCopy() const;
	
	char_t add(char_t v) const;
	char_t subtract(char_t v) const;
	char_t multiply(char_t v) const;
	char_t divide(char_t v) const;
	char_t modulo(char_t v) const;
	
	int_t compare(char_t v) const;
	
	bool isZero() const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

__primitive short_t {
	static short_t integer_literal(integer_literal_t literal);
	
	short_t implicitCopy() const;
	
	short_t abs() const;

	short_t add(short_t v) const;
	short_t subtract(short_t v) const;
	short_t multiply(short_t v) const;
	short_t divide(short_t v) const;
	short_t modulo(short_t v) const;
	
	int_t compare(short_t v) const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

__primitive int_t {
	static int_t integer_literal(integer_literal_t literal);
	
	int_t implicitCopy() const;
	
	int_t abs() const;

	int_t add(int_t v) const;
	int_t subtract(int_t v) const;
	int_t multiply(int_t v) const;
	int_t divide(int_t v) const;
	int_t modulo(int_t v) const;
	
	int_t compare(int_t v) const;
	bool isZero() const;
	bool isPositive() const;
	bool isNegative() const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

__primitive long_t {
	static long_t integer_literal(integer_literal_t literal);
	
	long_t implicitCopy() const;
	
	long_t abs() const;

	long_t add(long_t v) const;
	long_t subtract(long_t v) const;
	long_t multiply(long_t v) const;
	long_t divide(long_t v) const;
	long_t modulo(long_t v) const;
	
	int_t compare(long_t v) const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

__primitive int8_t {
	static int8_t integer_literal(integer_literal_t literal);
	
	int8_t implicitCopy() const;
	
	int8_t abs() const;

	int8_t add(int8_t v) const;
	int8_t subtract(int8_t v) const;
	int8_t multiply(int8_t v) const;
	int8_t divide(int8_t v) const;
	int8_t modulo(int8_t v) const;
	
	int_t compare(int8_t v) const;
	bool isZero() const;
	bool isPositive() const;
	bool isNegative() const;
}

__primitive uint8_t {
	static uint8_t integer_literal(integer_literal_t literal);
	
	uint8_t implicitCopy() const;

	uint8_t add(uint8_t v) const;
	uint8_t subtract(uint8_t v) const;
	uint8_t multiply(uint8_t v) const;
	uint8_t divide(uint8_t v) const;
	uint8_t modulo(uint8_t v) const;
	
	int_t compare(uint8_t v) const;
	bool isZero() const;
}

__primitive int16_t {
	static int16_t integer_literal(integer_literal_t literal);
	
	int16_t implicitCopy() const;
	
	int16_t abs() const;

	int16_t add(int16_t v) const;
	int16_t subtract(int16_t v) const;
	int16_t multiply(int16_t v) const;
	int16_t divide(int16_t v) const;
	int16_t modulo(int16_t v) const;
	
	int_t compare(int16_t v) const;
	bool isZero() const;
	bool isPositive() const;
	bool isNegative() const;
}

__primitive uint16_t {
	static uint16_t integer_literal(integer_literal_t literal);
	
	uint16_t implicitCopy() const;

	uint16_t add(uint16_t v) const;
	uint16_t subtract(uint16_t v) const;
	uint16_t multiply(uint16_t v) const;
	uint16_t divide(uint16_t v) const;
	uint16_t modulo(uint16_t v) const;
	
	int_t compare(uint16_t v) const;
	bool isZero() const;
}

__primitive int32_t {
	static int32_t integer_literal(integer_literal_t literal);
	
	int32_t implicitCopy() const;
	
	int32_t abs() const;

	int32_t add(int32_t v) const;
	int32_t subtract(int32_t v) const;
	int32_t multiply(int32_t v) const;
	int32_t divide(int32_t v) const;
	int32_t modulo(int32_t v) const;
	
	int_t compare(int32_t v) const;
	bool isZero() const;
	bool isPositive() const;
	bool isNegative() const;
}

__primitive uint32_t {
	static uint32_t integer_literal(integer_literal_t literal);
	
	uint32_t implicitCopy() const;

	uint32_t add(uint32_t v) const;
	uint32_t subtract(uint32_t v) const;
	uint32_t multiply(uint32_t v) const;
	uint32_t divide(uint32_t v) const;
	uint32_t modulo(uint32_t v) const;
	
	int_t compare(uint32_t v) const;
	bool isZero() const;
}

__primitive int64_t {
	static int64_t integer_literal(integer_literal_t literal);
	
	int64_t implicitCopy() const;
	
	int64_t abs() const;

	int64_t add(int64_t v) const;
	int64_t subtract(int64_t v) const;
	int64_t multiply(int64_t v) const;
	int64_t divide(int64_t v) const;
	int64_t modulo(int64_t v) const;
	
	int_t compare(int64_t v) const;
	bool isZero() const;
	bool isPositive() const;
	bool isNegative() const;
}

__primitive uint64_t {
	static uint64_t integer_literal(integer_literal_t literal);
	
	uint64_t implicitCopy() const;

	uint64_t add(uint64_t v) const;
	uint64_t subtract(uint64_t v) const;
	uint64_t multiply(uint64_t v) const;
	uint64_t divide(uint64_t v) const;
	uint64_t modulo(uint64_t v) const;
	
	int_t compare(uint64_t v) const;
	bool isZero() const;
}

__primitive float {
	static float float_literal(float_literal_t literal);
	
	float implicitCopy() const;

	float abs() const;

	float add(float v) const;
	float subtract(float v) const;
	float multiply(float v) const;
	float divide(float v) const;
	float modulo(float v) const;
	
	int_t compare(float v) const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

__primitive double {
	static double float_literal(float_literal_t literal);
	
	double implicitCopy() const;
	
	double abs() const;

	double add(double v) const;
	double subtract(double v) const;
	double multiply(double v) const;
	double divide(double v) const;
	double modulo(double v) const;
	
	int_t compare(double v) const;
	
	/*char_t toChar() const;
	short_t toShort() const;
	int_t toInt() const;
	long_t toLong() const;
	float toFloat() const;
	double toDouble() const;*/
}

template <typename T>
__primitive ptr {
	static ptr<T> Null();
	
	ptr<T> implicitCopy() const;
	
	lval<T> ptr_lval<T> deref();
	
	lval<T> ptr_lval<T> index(int_t index);
}

template <typename T>
__primitive ptr_lval {
	T* address();
	void assign(T value);
	T& dissolve() const;
}

template <typename T>
__primitive value_lval {
	static value_lval<T> Create(T value);
	T* address();
	void assign(T value);
	T& dissolve() const;
	T move();
}

template <typename T>
__primitive member_lval {
	static member_lval<T> Create(T value);
	T* address();
	void assign(T value);
	T& dissolve() const;
}

/*
Eventually the following will be adopted for use (once compile-time evaluation
has been implemented). For now, this stuff is still built-in to the compiler.

template <virtual typename T>
__primitive ref {
	ref<T> implicitCopy() const;
	T implicitDeepCopy() const;
	
	do (synthesizer) {
		// Add any methods from the referred-to type
		// that aren't part of this type.
		for (auto method: T.dynamic_methods()) {
			if (synthesizer.has_dynamic_method(method.name())) break;
			synthesizer.add_dynamic_method(method.returnType(), method.name(), method.argTypes()) const;
		}
	}
}

__primitive method {
	typename returnType() const;
	typename[] paramTypes() const;
}

interface None { }

template <virtual typename Constraint_t = None>
__primitive typename {
	bool has_static_method(string name) const;
	method get_static_method(string name) const;
	
	bool has_dynamic_method(string name) const;
	method get_dynamic_method(string name) const;
	
	do (synthesizer) {
		// 'call' calls the default constructor, if any exists.
		if (!Constraint.has_static_method("default")) break;
		auto method = Constraint.get_static_method("default") const;
		synthesizer.add_dynamic_method(method.returnType(), "call", method.argTypes()) const;
	}
	
	do (synthesizer) {
		// All constructors can be called by
		// name, as methods of this object.
		for (auto method: Constraint.static_methods()) {
			if (synthesizer.has_method(method.name())) break;
			synthesizer.add_dynamic_method(method.returnType(), method.name(), method.argTypes()) const;
		}
	}
}

template <virtual typename Constraint_t = None>
__primitive virtual_typename {
	bool has_static_method(string name) const;
	method get_static_method(string name) const;
	
	bool has_dynamic_method(string name) const;
	method get_dynamic_method(string name) const;
}

template <typename T, typename Ret, typename[] Param>
class interface_method(T* objectPtr, void* vtable, uint32_t value) {
	static Create(T* objectPtr, void* vtable, uint32_t value) {
		return @(objectPtr, vtable, value) const;
	}
	
	interface_method<T, Ret, Param> implicitCopy() const {
		return interface_method(@objectPtr, @vtable, @value) const;
	}
	
	Ret call(Param args[]) const {
		auto vtableArray = static_array<void *>(@vtable) const;
		auto f = function_ptr<Ret, {T*} + Param>(
		f(@objectPtr, args) const;
	}
}*/


