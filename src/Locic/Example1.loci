int printf(const char * const str, ...);

class TestClass{
	static Null();	
	
	static Default(int v);
	
	int getValue();
	
	void doSomething();
};

class TestClass2(int i){
	static Default(int v){
		return @(v);
	}
	
	~{
		printf("Destructor for TestClass2 with value %d.\n"C, @i);
	}
	
	int getValue(){
		return @i;
	}
	
	void passTestClass2(TestClass2 value) {
		printf("Received testclass2 value %d.\n"C, value.getValue());
	}
	
	void doSomething(){ }
	
	TestClass2 implicitCopy(){
		return @(@i);
	}
};

interface an_interface{
	int getValue();
	
	void doSomething();
	
	void passTestClass2(TestClass2 value);
}

template <typename T>
class ExampleTemplatedClass0(){
	static Default(){
		return @();
	}
}

template <typename T: an_interface>
class ExampleTemplatedClass1{ }

template <typename T>
interface DefaultConstructInterface {
	static T Default();
	
	T implicitCopy();
	
	T multiply(T value);
}

template <typename T: DefaultConstructInterface<T> >
class PolyClass(T v) {
	static Default(T value) {
		return @(value);
	}
	
	~{
		printf("Destroying PolyClass.\n"C);
	}
	
	T function(T value) {
		return value * @v;
	}
};

interface value_giving_interface{
	int getValue();
}

int getValue(value_giving_interface& v){
	return v.getValue();
}

an_interface& getPtrAsInterfaceRef(TestClass2 * ptr){
	return *ptr;
}

void function(TestClass2 * object){
	const TestClass2& ptr = *object;
	const TestClass2& ptr2 = ptr;
	printf("Value from fn: %d\n"C, ptr.getValue());
}

interface is_zero_interface {
	bool isZero();
}

bool isZero(is_zero_interface& v){
	return v.isZero();
}

class custom_lval(int i) {
	static Default() {
		return @(0);
	}
	
	custom_lval implicitCopy() {
		return @(@i);
	}
	
	int* address() {
		return &@i;
	}

	void assign(int value) {
		@i = value;
	}
	
	int& dissolve() {
		return @i;
	}
	
	int move() {
		int tmp = @i;
		@i = 0;
		return tmp;
	}
}

void lvalFunc(lval custom_lval& custLval) {
	printf("Custom lval: %d\n"C, move custLval);
}

class count(int from, int to) {
	static Default(int from, int to) {
		return @(from, to);
	}
	
	int front() {
		return @from;
	}
	
	void popFront() {
		@from += 1;
	}
	
	bool empty() {
		return @from >= @to;
	}
};

void goGet(an_interface& interfaceRef, TestClass2* val) {
	interfaceRef.passTestClass2(move *val);
	printf("Done goGet.\n"C);
}

datatype Something(int a, int b);

void datatypeDemo() {
	Something i = Something(41, 42);
	Something(int a, _) = move i;
	printf("a = %d\n"C, a);
}

// datatype Tree = Node(Tree* left, Tree* right) | Leaf(int value);

void* malloc(int size);
void free(void* ptr);

template <typename T>
interface Copyable {
	T implicitCopy();
}

template <typename T: Copyable<T>>
class Memory(T* ptr, int size, T emptyValue, T guardSlot) {
	static Default(int size, T emptyValue) {
		int sizeof_int = 4;
		auto inst = @(reinterpret_cast<void*, T*>(malloc(size * sizeof_int)), size, emptyValue, emptyValue);
		
		for (auto i: count(0, inst.size())) {
			inst[i] = emptyValue;
		}
		
		return move inst;
	}
	
	~ {
		free(reinterpret_cast<T*, void*>(@ptr));
	}
	
	value_lval<T>& index(int i) {
		if (i >= 0) {
			if (i < @size) {
				return @ptr[i];
			}
		}
		printf("Out of bounds at index '%d'.\n"C, i);
		@guardSlot = @emptyValue;
		return @guardSlot;
	}
	
	int size() {
		return @size;
	}
	
}

Memory<int> createMemory() {
	auto m = Memory<int>(20, 0-1000000);
	for (auto i: count(0 - 5, 25)) {
		m[i] = 42 + i;
	}
	return move m;
}

int main(int argc, char ** argv){
	if(argc < 2){
		printf("Give me at least one argument...\n"C);
		return 1;
	}
	
	{
		auto m = createMemory();
		for (auto i: count(0 - 5, m.size() + 5)) {
			printf("m[%02d] = %d.\n"C, i, m[i]);
		}
	}
	
	char * programName = argv[0];
	printf("Program name is %s.\n"C, programName);
	
	int argIndex = 1;
	while (argIndex < argc) {
		printf("    Arg %d: %s\n"C, argIndex, argv[argIndex]);
		argIndex += 1;
	}
	
	lval custom_lval custLval = custom_lval();
	custLval = 101;
	lvalFunc(custLval);
	
	//char * argv0 = argv[0];
	
	TestClass nullThing = null;
	
	auto templatedInstance = ExampleTemplatedClass0<int>();
	
	auto polyInst = PolyClass<int>(21);
	const int res000 = polyInst.function(8);
	printf("res000 = %d.\n"C, res000);
	
	auto polyInst2 = PolyClass<double>(4.0);
	const double res001 = polyInst2.function(16.0);
	printf("res001 = %f.\n"C, res001);
	
	auto polyInst3 = PolyClass<float>(4.0f);
	const float res002 = polyInst3.function(4.0f);
	printf("res002 = %f.\n"C, res002);
	
	{
		auto templatedInstancee = ExampleTemplatedClass0<int>();
	}
	
	auto firstTestClass = TestClass(1);
	auto firstTestClassMoved = move firstTestClass;
	
	{
		auto tmpValue = TestClass2(50).getValue();
		printf("TMPVALUE: %d\n"C, tmpValue);
		auto toDestroy = TestClass2(99);
	}
	
	auto testObject = TestClass2(argc * 2);
	
	//auto testObjectCopy = testObject;
	
	function(&testObject);
	
	printf("Value: %d\n"C, testObject.getValue());
	
	auto interfaceRef = getPtrAsInterfaceRef(&testObject);
	printf("Got interface ref.\n"C);
	
	auto newTestClass2 = TestClass2(1024);
	goGet(interfaceRef, &newTestClass2);
	
	an_interface& interfaceObject = getPtrAsInterfaceRef(&testObject);
	printf("Interface (2) value: %d\n"C, getValue(interfaceObject));
	
	{
		int potentially_zero_value = argc - 2;
		bool isZ = isZero(potentially_zero_value);
		if(isZ){
			printf("Is zero!\n"C);
		}
	}
	
	/*{
		auto t = PolyClass<TestClass>(TestClass(0));
		auto t2 = t.function(TestClass(1));
	}*/
	
	int i = 0;
	int * j = &i;
	while(i < argc){
		printf("i = %d\n"C, i);
		*j += 1;
	}
	
	if(i != (*j + 1)){
		printf("%d != %d\n"C, i, *j + 1);
	}
	
	float f = 3.141592653f;
	double d = 3.141592653;
	printf("Float f = %.10f, Double d = %.10f\n"C, f, d);
	
	int loopCount = 0;
	while(loopCount < 5) {
		loopCount += 1;
		f = f * f;
		d = d * d;
		printf("Float f = %.10f, Double d = %.10f\n"C, f, d);
	}
	
	printf("Hello world!\n"C);
	printf("This is Loci!\n"C);
	
	if(argc == 2){
		printf("You gave me just 1 argument\n"C);
	}else{
		printf("You gave me %d arguments\n"C, argc - 1);
	}
	
	return 0;
}

