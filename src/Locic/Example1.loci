int printf(const char * str, ...);

class TestClass{
	static Default(int v);
	
	int getValue();
};

class A{
	public:
		A();
	
};

class B{
	public:
		B(A& a);
	
};

template <typename T, size_t Size>
class Array(unsafe T[Size] data){
	static Default(){
		return @(data: null);
	}
	
	void move(Array<T, Size>& array){
		
	}
}

class Movable(A a, B b){
	public:
		Movable()
			: a_(), b_(a){ }
			
		Default(){
			return @(a: A(), b: B(a));
		}
	
		Movable(Movable& m)
			: a_(m.a_), b_(a_){ }
		
		Move(Movable& m){
			return @(a: m.a, B(a));
		}
		
		void move(const Movable& m){
			parent_->removeConsumer(&m);
			parent_->addConsumer(&m);
		}
};

class TestClass2(int i){
	static Default(int v){
		return @(v);
	}
	
	int getValue(){
		return @i;
	}
};

interface an_interface{
	int getValue();
}

an_interface * getPtr(TestClass2 * ptr){
	return ptr;
}

void function(TestClass2 object){
	printf("Value: %d\n"C, object.getValue());
}

int main(int argc, char ** argv){
	if(argc < 2){
		printf("Give me at least one argument...\n"C);
		return 1;
	}
	
	auto testObject = TestClass2(argc * 2);
	
	function(testObject);
	
	printf("Value: %d\n"C, testObject.getValue());
	
	printf("Interface value: %d\n"C, getPtr(&testObject)->getValue());
	
	int i = 0;
	int * j = &i;
	while(i < argc){
		printf("i = %d\n"C, i);
		*j += 1;
	}
	
	if(i != (*j + 1)){
		printf("%d != %d\n"C, i, *j + 1);
	}
	
	float f = 3.141592653f;
	double d = 3.141592653;
	printf("Float f = %f, Double d = %f\n"C, f, d);
	
	printf("Hello world!\n"C);
	printf("This is Loci!\n"C);
	
	if(argc == 2){
		printf("You gave me just 1 argument\n"C);
	}else{
		printf("You gave me %d arguments\n"C, argc - 1);
	}
	
	return 0;
}

