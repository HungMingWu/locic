__primitive int64_t {
	static int64_t implicit_cast_int8_t(int8_t value) noexcept;
	static int64_t implicit_cast_int16_t(int16_t value) noexcept;
	static int64_t implicit_cast_int32_t(int32_t value) noexcept;
	
	int64_t implicit_copy() const noexcept;
	int64_t copy() const noexcept;
	
	int64_t plus() const noexcept;
	int64_t minus() const noexcept;
	
	int64_t abs() const noexcept;

	int64_t add(const int64_t& v) const noexcept;
	int64_t subtract(const int64_t& v) const noexcept;
	int64_t multiply(const int64_t& v) const noexcept;
	int64_t divide(const int64_t& v) const noexcept;
	int64_t modulo(const int64_t& v) const noexcept;
	
	bool equal(const int64_t& v) const noexcept;
	bool not_equal(const int64_t& v) const noexcept;
	bool less_than(const int64_t& v) const noexcept;
	bool less_than_or_equal(const int64_t& v) const noexcept;
	bool greater_than(const int64_t& v) const noexcept;
	bool greater_than_or_equal(const int64_t& v) const noexcept;
	
	compare_result_t compare(const int64_t& v) const noexcept;
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
	
	void __move_to(void* ptr, size_t position) noexcept;
}

template <typename T : movable>
interface __implicit_cast_from_int64_t {
	static T implicit_cast_int64_t(int64_t value) noexcept;
}

template <typename T : movable>
interface __cast_from_int64_t {
	static T cast_int64_t(int64_t value) noexcept;
}

template <typename T: __implicit_cast_from_int64_t<T>>
T int64_t::implicitCast() const noexcept require(T : movable) {
	return T.implicit_cast_int64_t(self);
}

template <typename T: __cast_from_int64_t<T>>
T int64_t::cast() const noexcept require(T : movable) {
	return T.cast_int64_t(self);
}

