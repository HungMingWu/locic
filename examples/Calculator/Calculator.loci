// Printf has an 'int' return type, but since
// it's ignored just use 'void'.
void printf(const char * const str, ...);

int atoi(const char * const str);
int strcmp(const char * const s1, const char * const s2);

bool isStrEqual(const char * const s1, const char * const s2) {
	return strcmp(s1, s2) == 0;
}

int main(int argc, char ** argv){
	printf("* Welcome to Calculator! *\n");
	
	const char * const usage = "loci-calc [add|sub|mul|div] int int (e.g. loci-calc mul 3 4)";
	const char * const answerText = "Here's your answer";
	
	if (argc < 4) {
		printf("Too few arguments! You need to give 3 arguments:\n");
		printf("    %s\n", usage);
		return 1;
	}
	
	if (argc > 4) {
		printf("Too many arguments! You need to give 3 arguments:\n");
		printf("    %s\n", usage);
		return 1;
	}
	
	const char * const op = argv[1];
	int arg1 = atoi(argv[2]);
	int arg2 = atoi(argv[3]);
	
	if (isStrEqual(op, "add")) {
		printf("%s: %d.\n", answerText, arg1 + arg2);
		return 0;
	}
	
	if (isStrEqual(op, "sub")) {
		printf("%s: %d.\n", answerText, arg1 - arg2);
		return 0;
	}
	
	if (isStrEqual(op, "mul")) {
		printf("%s: %d.\n", answerText, arg1 * arg2);
		return 0;
	}
	
	if (isStrEqual(op, "div")) {
		printf("%s: %d.\n", answerText, arg1 / arg2);
		return 0;
	}
	
	printf("Unknown operation '%s'. Sorry...\n", op);
	return 1;
}

