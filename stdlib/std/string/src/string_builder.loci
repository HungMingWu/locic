export std.string 0.1.0 {
	
	namespace std {
		
		template <typename T>
		interface readable_lval {
			T& dissolve() const;
		}
		
		class string_builder (utf8_buffer buffer) {
			static create() {
				return @(utf8_buffer());
			}
			
			bool empty() const noexcept {
				return @buffer.empty();
			}
			
			size_t length() const noexcept {
				return @buffer.length();
			}
			
			void append(final unichar character) {
				@buffer.append(character);
			}
			
			template <typename RangeType : forward_range<unichar, LvalType>, typename 
LvalType : readable_lval<unichar>>
			void append_range(RangeType range) {
				@buffer.append_range<RangeType, LvalType>(move range);
			}
			
			string str() const {
				return string::cstring(@buffer.c_str());
			}
		}
		
	}
	
}

