template <typename T>
__primitive __ptr {
	static __ptr<T> null() noexcept;
	
	__ptr<T> implicit_copy() const noexcept;
	__ptr<T> copy() const noexcept;
	
	lval<T> ptr_lval<T> deref() const noexcept;
	
	lval<T> ptr_lval<T> index(size_t index) const noexcept;
	
	__ptr<T> add(const ptrdiff_t& v) const noexcept;
	ptrdiff_t subtract(const __ptr<T>& v) const noexcept;
	
	bool equal(const __ptr<T>& value) const noexcept;
	bool not_equal(const __ptr<T>& value) const noexcept;
	bool less_than(const __ptr<T>& v) const noexcept;
	bool less_than_or_equal(const __ptr<T>& v) const noexcept;
	bool greater_than(const __ptr<T>& v) const noexcept;
	bool greater_than_or_equal(const __ptr<T>& v) const noexcept;
	
	int compare(const __ptr<T>& value) const noexcept;
}
