-------------------------------
--- Loci Compiler Tools 1.1 ---
-------------------------------

Website: loci-lang.org

This directory contains the compiler (and related tools) 'LOCIC',
for the programming language Loci.

--- How to build ---

Before building and using LOCIC, it's first necessary to build
and install its key dependencies, LLVM and Clang. Other
dependencies are also listed below.

Once the dependencies have been installed, create a directory
alongside the LOCIC source directory and run:

$ cmake ../locic-src

You can then just run (assuming a Unix system):

$ make

--- Dependencies---

This release of LOCIC depends on the following:

* CMake (build system) [debian package: cmake]
* Boost Filesystem [debian package: libboost-filesystem-dev]
* Boost System [debian package: libboost-system-dev]
* LLVM 3.3/3.4 (build with instructions below)
* Clang 3.3/3.4 (build with instructions below)

Specific versions of LLVM and Clang are given since their
API tends to be incompatible between releases.

LOCIC is written in C++11, and hence must be built by a
C++ compiler with C++11 support.

--- Building LLVM and Clang ---

Default Ubuntu packages tend not to include the Find*.cmake
files, which LOCIC relies on to discover these libraries,
so it's recommended to download the appropriate version of
LLVM and Clang and build them using CMake.

Assuming the following directory structure, where 'clang-src'
and 'llvm-src' contain the source directory tree for each
library:

/ -> clang -> clang-src
  -> llvm -> llvm-src

LLVM must be built first, since Clang depends on LLVM. To
build LLVM, run the following commands:

$ pushd llvm
$ mkdir llvm-build
$ cd llvm-build
$ cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ../llvm-src
$ make -j4
$ popd

These commands create an out-of-source build directory in
which to build LLVM. They then run CMake with the appropriate
flags to create a Release build that will be installed to '/usr'
on the host system.

Note that the ‘-j’ option tells make how many recipes may
execute at once; use this to your advantage to reduce the
build time on multi-core machines.

Similarly, for Clang:

$ pushd clang
$ mkdir clang-build
$ cd clang-build
$ cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release -DCLANG_PATH_TO_LLVM_SOURCE=../../llvm/llvm-src -DCLANG_PATH_TO_LLVM_BUILD=../../llvm/llvm-build ../clang-src
$ make -j4
$ popd

None of these commands actually install the packages, so you'll
want to run the following *as root* in each of the build
directories:

$ make install

--- Examples ---

The /examples/ subdirectory gives an idea of how to use
both the compiler tools and the Loci programming language.

These build with the project.

--- Testing ---

Various tests are include in the /test/ subdirectory. These
tests are not run as part of building the project; they
can be run after a successful build with one of the following
commands:

$ make test

...or:

$ ctest

If one of the tests fail, run the following command to see the
output of all failing tests.

$ ctest --output-on-failure

