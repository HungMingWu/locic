__primitive void_t { }

template <typename T>
interface __implicit_cast_from_null_t {
	static T null() noexcept;
}

__primitive null_t {
	static null_t create() noexcept;
	
	template <typename T: __implicit_cast_from_null_t<T>>
	T implicitCast() const noexcept;
}

__primitive compare_result_t {
	static compare_result_t equal() noexcept;
	static compare_result_t less_than() noexcept;
	static compare_result_t greater_than() noexcept;
	
	compare_result_t implicitCopy() const noexcept;
	
	bool isEqual() const noexcept;
	bool isNotEqual() const noexcept;
	bool isLessThan() const noexcept;
	bool isLessThanOrEqual() const noexcept;
	bool isGreaterThan() const noexcept;
	bool isGreaterThanOrEqual() const noexcept;
}

template <typename T>
interface __implicit_cast_from_bool_t {
	static T implicit_cast_bool_t(bool value) noexcept;
}

template <typename T>
interface __cast_from_bool_t {
	static T cast_bool_t(bool value) noexcept;
}

__primitive bool {
	bool implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_bool_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_bool_t<T>>
	T cast() const noexcept;
	
	bool equal(const bool& v) const noexcept;
	bool not_equal(const bool& v) const noexcept;
	
	compare_result_t compare(const bool& v) const noexcept;
	
	bool not() const noexcept;
}

template <typename T>
interface __implicit_cast_from_unichar_t {
	static T implicit_cast_unichar_t(unichar value) noexcept;
}

template <typename T>
interface __cast_from_unichar_t {
	static T cast_unichar_t(unichar value) noexcept;
}

__primitive unichar {
	static unichar implicit_cast_byte_t(byte_t c) noexcept;
	
	unichar implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_unichar_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_unichar_t<T>>
	T cast() const noexcept;
	
	compare_result_t compare(const unichar& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_byte_t {
	static T implicit_cast_byte_t(byte_t value) noexcept;
}

template <typename T>
interface __cast_from_byte_t {
	static T cast_byte_t(byte_t value) noexcept;
}

__primitive byte_t {
	static byte_t implicit_cast_int8_t(int8_t value) noexcept;
	
	static byte_t cast_int_t(int_t value) noexcept;
	
	byte_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_byte_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_byte_t<T>>
	T cast() const noexcept;
	
	byte_t plus() const noexcept;
	byte_t minus() const noexcept;
	
	byte_t abs() const noexcept;
	
	byte_t add(const byte_t& v) const noexcept;
	byte_t subtract(const byte_t& v) const noexcept;
	byte_t multiply(const byte_t& v) const noexcept;
	byte_t divide(const byte_t& v) const noexcept;
	byte_t modulo(const byte_t& v) const noexcept;
	
	bool equal(const byte_t& v) const noexcept;
	bool not_equal(const byte_t& v) const noexcept;
	bool less_than(const byte_t& v) const noexcept;
	bool less_than_or_equal(const byte_t& v) const noexcept;
	bool greater_than(const byte_t& v) const noexcept;
	bool greater_than_or_equal(const byte_t& v) const noexcept;
	
	compare_result_t compare(const byte_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_ubyte_t {
	static T implicit_cast_ubyte_t(ubyte_t value) noexcept;
}

template <typename T>
interface __cast_from_ubyte_t {
	static T cast_ubyte_t(ubyte_t value) noexcept;
}

__primitive ubyte_t {
	static ubyte_t implicit_cast_uint8_t(uint8_t value) noexcept;
	
	ubyte_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ubyte_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ubyte_t<T>>
	T cast() const noexcept;
	
	ubyte_t add(const ubyte_t& v) const noexcept;
	ubyte_t subtract(const ubyte_t& v) const noexcept;
	ubyte_t multiply(const ubyte_t& v) const noexcept;
	ubyte_t divide(const ubyte_t& v) const noexcept;
	ubyte_t modulo(const ubyte_t& v) const noexcept;
	
	bool equal(const ubyte_t& v) const noexcept;
	bool not_equal(const ubyte_t& v) const noexcept;
	bool less_than(const ubyte_t& v) const noexcept;
	bool less_than_or_equal(const ubyte_t& v) const noexcept;
	bool greater_than(const ubyte_t& v) const noexcept;
	bool greater_than_or_equal(const ubyte_t& v) const noexcept;
	
	compare_result_t compare(const ubyte_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_short_t {
	static T implicit_cast_short_t(short_t value) noexcept;
}

template <typename T>
interface __cast_from_short_t {
	static T cast_short_t(short_t value) noexcept;
}

__primitive short_t {
	static short_t implicit_cast_int8_t(int8_t value) noexcept;
	static short_t implicit_cast_int16_t(int16_t value) noexcept;
	static short_t implicit_cast_byte_t(byte_t value) noexcept;
	
	short_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_short_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_short_t<T>>
	T cast() const noexcept;
	
	short_t plus() const noexcept;
	short_t minus() const noexcept;
	
	short_t abs() const noexcept;

	short_t add(const short_t& v) const noexcept;
	short_t subtract(const short_t& v) const noexcept;
	short_t multiply(const short_t& v) const noexcept;
	short_t divide(const short_t& v) const noexcept;
	short_t modulo(const short_t& v) const noexcept;
	
	bool equal(const short_t& v) const noexcept;
	bool not_equal(const short_t& v) const noexcept;
	bool less_than(const short_t& v) const noexcept;
	bool less_than_or_equal(const short_t& v) const noexcept;
	bool greater_than(const short_t& v) const noexcept;
	bool greater_than_or_equal(const short_t& v) const noexcept;
	
	compare_result_t compare(const short_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_ushort_t {
	static T implicit_cast_ushort_t(ushort_t value) noexcept;
}

template <typename T>
interface __cast_from_ushort_t {
	static T cast_ushort_t(ushort_t value) noexcept;
}

__primitive ushort_t {
	static ushort_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ushort_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static ushort_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	
	ushort_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ushort_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ushort_t<T>>
	T cast() const noexcept;
	
	ushort_t add(const ushort_t& v) const noexcept;
	ushort_t subtract(const ushort_t& v) const noexcept;
	ushort_t multiply(const ushort_t& v) const noexcept;
	ushort_t divide(const ushort_t& v) const noexcept;
	ushort_t modulo(const ushort_t& v) const noexcept;
	
	bool equal(const ushort_t& v) const noexcept;
	bool not_equal(const ushort_t& v) const noexcept;
	bool less_than(const ushort_t& v) const noexcept;
	bool less_than_or_equal(const ushort_t& v) const noexcept;
	bool greater_than(const ushort_t& v) const noexcept;
	bool greater_than_or_equal(const ushort_t& v) const noexcept;
	
	compare_result_t compare(const ushort_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int_t {
	static T implicit_cast_int_t(int_t value) noexcept;
}

template <typename T>
interface __cast_from_int_t {
	static T cast_int_t(int_t value) noexcept;
}

__primitive int_t {
	static int_t unit() noexcept;
	
	static int_t implicit_cast_int8_t(int8_t value) noexcept;
	static int_t implicit_cast_int16_t(int16_t value) noexcept;
	static int_t implicit_cast_byte_t(byte_t value) noexcept;
	static int_t implicit_cast_short_t(short_t value) noexcept;
	
	int_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_int_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_int_t<T>>
	T cast() const noexcept;
	
	int_t plus() const noexcept;
	int_t minus() const noexcept;
	
	int_t abs() const noexcept;

	int_t add(const int_t& v) const noexcept;
	int_t subtract(const int_t& v) const noexcept;
	int_t multiply(const int_t& v) const noexcept;
	int_t divide(const int_t& v) const noexcept;
	int_t modulo(const int_t& v) const noexcept;
	
	bool equal(const int_t& v) const noexcept;
	bool not_equal(const int_t& v) const noexcept;
	bool less_than(const int_t& v) const noexcept;
	bool less_than_or_equal(const int_t& v) const noexcept;
	bool greater_than(const int_t& v) const noexcept;
	bool greater_than_or_equal(const int_t& v) const noexcept;
	
	compare_result_t compare(const int_t& v) const noexcept;
	
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_uint_t {
	static T implicit_cast_uint_t(uint_t value) noexcept;
}

template <typename T>
interface __cast_from_uint_t {
	static T cast_uint_t(uint_t value) noexcept;
}

__primitive uint_t {
	static uint_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static uint_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static uint_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	static uint_t implicit_cast_ushort_t(ushort_t value) noexcept;
	
	uint_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint_t<T>>
	T cast() const noexcept;
	
	uint_t add(const uint_t& v) const noexcept;
	uint_t subtract(const uint_t& v) const noexcept;
	uint_t multiply(const uint_t& v) const noexcept;
	uint_t divide(const uint_t& v) const noexcept;
	uint_t modulo(const uint_t& v) const noexcept;
	
	bool equal(const uint_t& v) const noexcept;
	bool not_equal(const uint_t& v) const noexcept;
	bool less_than(const uint_t& v) const noexcept;
	bool less_than_or_equal(const uint_t& v) const noexcept;
	bool greater_than(const uint_t& v) const noexcept;
	bool greater_than_or_equal(const uint_t& v) const noexcept;
	
	compare_result_t compare(const uint_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_long_t {
	static T implicit_cast_long_t(long_t value) noexcept;
}

template <typename T>
interface __cast_from_long_t {
	static T cast_long_t(long_t value) noexcept;
}

__primitive long_t {
	static long_t implicit_cast_int8_t(int8_t value) noexcept;
	static long_t implicit_cast_int16_t(int16_t value) noexcept;
	static long_t implicit_cast_int32_t(int32_t value) noexcept;
	static long_t implicit_cast_byte_t(byte_t value) noexcept;
	static long_t implicit_cast_short_t(short_t value) noexcept;
	static long_t implicit_cast_int_t(int_t value) noexcept;
	
	long_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_long_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_long_t<T>>
	T cast() const noexcept;
	
	long_t plus() const noexcept;
	long_t minus() const noexcept;
	
	long_t abs() const noexcept;

	long_t add(const long_t& v) const noexcept;
	long_t subtract(const long_t& v) const noexcept;
	long_t multiply(const long_t& v) const noexcept;
	long_t divide(const long_t& v) const noexcept;
	long_t modulo(const long_t& v) const noexcept;
	
	bool equal(const long_t& v) const noexcept;
	bool not_equal(const long_t& v) const noexcept;
	bool less_than(const long_t& v) const noexcept;
	bool less_than_or_equal(const long_t& v) const noexcept;
	bool greater_than(const long_t& v) const noexcept;
	bool greater_than_or_equal(const long_t& v) const noexcept;
	
	compare_result_t compare(const long_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_ulong_t {
	static T implicit_cast_ulong_t(ulong_t value) noexcept;
}

template <typename T>
interface __cast_from_ulong_t {
	static T cast_ulong_t(ulong_t value) noexcept;
}

__primitive ulong_t {
	static ulong_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ulong_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static ulong_t implicit_cast_uint32_t(uint32_t value) noexcept;
	static ulong_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	static ulong_t implicit_cast_ushort_t(ushort_t value) noexcept;
	static ulong_t implicit_cast_uint_t(uint_t value) noexcept;
	
	ulong_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ulong_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ulong_t<T>>
	T cast() const noexcept;
	
	ulong_t add(const ulong_t& v) const noexcept;
	ulong_t subtract(const ulong_t& v) const noexcept;
	ulong_t multiply(const ulong_t& v) const noexcept;
	ulong_t divide(const ulong_t& v) const noexcept;
	ulong_t modulo(const ulong_t& v) const noexcept;
	
	bool equal(const ulong_t& v) const noexcept;
	bool not_equal(const ulong_t& v) const noexcept;
	bool less_than(const ulong_t& v) const noexcept;
	bool less_than_or_equal(const ulong_t& v) const noexcept;
	bool greater_than(const ulong_t& v) const noexcept;
	bool greater_than_or_equal(const ulong_t& v) const noexcept;
	
	compare_result_t compare(const ulong_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_longlong_t {
	static T implicit_cast_longlong_t(longlong_t value) noexcept;
}

template <typename T>
interface __cast_from_longlong_t {
	static T cast_longlong_t(longlong_t value) noexcept;
}

__primitive longlong_t {
	static longlong_t implicit_cast_int8_t(int8_t value) noexcept;
	static longlong_t implicit_cast_int16_t(int16_t value) noexcept;
	static longlong_t implicit_cast_int32_t(int32_t value) noexcept;
	static longlong_t implicit_cast_int64_t(int64_t value) noexcept;
	static longlong_t implicit_cast_byte_t(byte_t value) noexcept;
	static longlong_t implicit_cast_short_t(short_t value) noexcept;
	static longlong_t implicit_cast_int_t(int_t value) noexcept;
	static longlong_t implicit_cast_long_t(long_t value) noexcept;
	
	longlong_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_longlong_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_longlong_t<T>>
	T cast() const noexcept;
	
	longlong_t plus() const noexcept;
	longlong_t minus() const noexcept;
	
	longlong_t abs() const noexcept;

	longlong_t add(const longlong_t& v) const noexcept;
	longlong_t subtract(const longlong_t& v) const noexcept;
	longlong_t multiply(const longlong_t& v) const noexcept;
	longlong_t divide(const longlong_t& v) const noexcept;
	longlong_t modulo(const longlong_t& v) const noexcept;
	
	bool equal(const longlong_t& v) const noexcept;
	bool not_equal(const longlong_t& v) const noexcept;
	bool less_than(const longlong_t& v) const noexcept;
	bool less_than_or_equal(const longlong_t& v) const noexcept;
	bool greater_than(const longlong_t& v) const noexcept;
	bool greater_than_or_equal(const longlong_t& v) const noexcept;
	
	compare_result_t compare(const longlong_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_ulonglong_t {
	static T implicit_cast_ulonglong_t(ulonglong_t value) noexcept;
}

template <typename T>
interface __cast_from_ulonglong_t {
	static T cast_ulonglong_t(ulonglong_t value) noexcept;
}

__primitive ulonglong_t {
	static ulonglong_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static ulonglong_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static ulonglong_t implicit_cast_uint32_t(uint32_t value) noexcept;
	static ulonglong_t implicit_cast_uint64_t(uint64_t value) noexcept;
	static ulonglong_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	static ulonglong_t implicit_cast_ushort_t(ushort_t value) noexcept;
	static ulonglong_t implicit_cast_uint_t(uint_t value) noexcept;
	static ulonglong_t implicit_cast_ulong_t(ulong_t value) noexcept;
	
	static ulonglong_t cast_size_t(size_t value) noexcept;
	
	ulonglong_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ulonglong_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ulonglong_t<T>>
	T cast() const noexcept;
	
	ulonglong_t add(const ulonglong_t& v) const noexcept;
	ulonglong_t subtract(const ulonglong_t& v) const noexcept;
	ulonglong_t multiply(const ulonglong_t& v) const noexcept;
	ulonglong_t divide(const ulonglong_t& v) const noexcept;
	ulonglong_t modulo(const ulonglong_t& v) const noexcept;
	
	bool equal(const ulonglong_t& v) const noexcept;
	bool not_equal(const ulonglong_t& v) const noexcept;
	bool less_than(const ulonglong_t& v) const noexcept;
	bool less_than_or_equal(const ulonglong_t& v) const noexcept;
	bool greater_than(const ulonglong_t& v) const noexcept;
	bool greater_than_or_equal(const ulonglong_t& v) const noexcept;
	
	compare_result_t compare(const ulonglong_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_ssize_t {
	static T implicit_cast_ssize_t(ssize_t value) noexcept;
}

template <typename T>
interface __cast_from_ssize_t {
	static T cast_ssize_t(ssize_t value) noexcept;
}

__primitive ssize_t {
	static ssize_t implicit_cast_int8_t(int8_t value) noexcept;
	static ssize_t implicit_cast_int16_t(int16_t value) noexcept;
	static ssize_t implicit_cast_byte_t(byte_t value) noexcept;
	static ssize_t implicit_cast_short_t(short_t value) noexcept;
	
	ssize_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ssize_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ssize_t<T>>
	T cast() const noexcept;
	
	ssize_t plus() const noexcept;
	ssize_t minus() const noexcept;
	
	ssize_t abs() const noexcept;

	ssize_t add(const ssize_t& v) const noexcept;
	ssize_t subtract(const ssize_t& v) const noexcept;
	ssize_t multiply(const ssize_t& v) const noexcept;
	ssize_t divide(const ssize_t& v) const noexcept;
	ssize_t modulo(const ssize_t& v) const noexcept;
	
	bool equal(const ssize_t& v) const noexcept;
	bool not_equal(const ssize_t& v) const noexcept;
	bool less_than(const ssize_t& v) const noexcept;
	bool less_than_or_equal(const ssize_t& v) const noexcept;
	bool greater_than(const ssize_t& v) const noexcept;
	bool greater_than_or_equal(const ssize_t& v) const noexcept;
	
	compare_result_t compare(const ssize_t& v) const noexcept;
	
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
	
	size_t unsignedValue() const noexcept;
}

template <typename T>
interface __implicit_cast_from_size_t {
	static T implicit_cast_size_t(size_t value) noexcept;
}

template <typename T>
interface __cast_from_size_t {
	static T cast_size_t(size_t value) noexcept;
}

__primitive size_t {
	static size_t unit() noexcept;
	
	static size_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static size_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static size_t implicit_cast_ubyte_t(ubyte_t value) noexcept;
	static size_t implicit_cast_ushort_t(ushort_t value) noexcept;
	
	static size_t cast_int_t(int_t value) noexcept;
	static size_t cast_float_t(float_t value) noexcept;
	static size_t cast_double_t(double_t value) noexcept;
	static size_t cast_longdouble_t(longdouble_t value) noexcept;
	
	size_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_size_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_size_t<T>>
	T cast() const noexcept;
	
	size_t add(const size_t& v) const noexcept;
	size_t subtract(const size_t& v) const noexcept;
	size_t multiply(const size_t& v) const noexcept;
	size_t divide(const size_t& v) const noexcept;
	size_t modulo(const size_t& v) const noexcept;
	
	bool equal(const size_t& v) const noexcept;
	bool not_equal(const size_t& v) const noexcept;
	bool less_than(const size_t& v) const noexcept;
	bool less_than_or_equal(const size_t& v) const noexcept;
	bool greater_than(const size_t& v) const noexcept;
	bool greater_than_or_equal(const size_t& v) const noexcept;
	
	compare_result_t compare(const size_t& v) const noexcept;
	
	bool isZero() const noexcept;
	
	ssize_t signedValue() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int8_t {
	static T implicit_cast_int8_t(int8_t value) noexcept;
}

template <typename T>
interface __cast_from_int8_t {
	static T cast_int8_t(int8_t value) noexcept;
}

__primitive int8_t {
	int8_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_int8_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_int8_t<T>>
	T cast() const noexcept;
	
	int8_t plus() const noexcept;
	int8_t minus() const noexcept;
	
	int8_t abs() const noexcept;

	int8_t add(const int8_t& v) const noexcept;
	int8_t subtract(const int8_t& v) const noexcept;
	int8_t multiply(const int8_t& v) const noexcept;
	int8_t divide(const int8_t& v) const noexcept;
	int8_t modulo(const int8_t& v) const noexcept;
	
	bool equal(const int8_t& v) const noexcept;
	bool not_equal(const int8_t& v) const noexcept;
	bool less_than(const int8_t& v) const noexcept;
	bool less_than_or_equal(const int8_t& v) const noexcept;
	bool greater_than(const int8_t& v) const noexcept;
	bool greater_than_or_equal(const int8_t& v) const noexcept;
	
	compare_result_t compare(const int8_t& v) const noexcept;
	
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_uint8_t {
	static T implicit_cast_uint8_t(uint8_t value) noexcept;
}

template <typename T>
interface __cast_from_uint8_t {
	static T cast_uint8_t(uint8_t value) noexcept;
}

__primitive uint8_t {
	uint8_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint8_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint8_t<T>>
	T cast() const noexcept;

	uint8_t add(const uint8_t& v) const noexcept;
	uint8_t subtract(const uint8_t& v) const noexcept;
	uint8_t multiply(const uint8_t& v) const noexcept;
	uint8_t divide(const uint8_t& v) const noexcept;
	uint8_t modulo(const uint8_t& v) const noexcept;
	
	bool equal(const uint8_t& v) const noexcept;
	bool not_equal(const uint8_t& v) const noexcept;
	bool less_than(const uint8_t& v) const noexcept;
	bool less_than_or_equal(const uint8_t& v) const noexcept;
	bool greater_than(const uint8_t& v) const noexcept;
	bool greater_than_or_equal(const uint8_t& v) const noexcept;
	
	compare_result_t compare(const uint8_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int16_t {
	static T implicit_cast_int16_t(int16_t value) noexcept;
}

template <typename T>
interface __cast_from_int16_t {
	static T cast_int16_t(int16_t value) noexcept;
}

__primitive int16_t {
	static int16_t implicit_cast_int8_t(int8_t value) noexcept;
	
	int16_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_int16_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_int16_t<T>>
	T cast() const noexcept;
	
	int16_t plus() const noexcept;
	int16_t minus() const noexcept;
	
	int16_t abs() const noexcept;

	int16_t add(const int16_t& v) const noexcept;
	int16_t subtract(const int16_t& v) const noexcept;
	int16_t multiply(const int16_t& v) const noexcept;
	int16_t divide(const int16_t& v) const noexcept;
	int16_t modulo(const int16_t& v) const noexcept;
	
	bool equal(const int16_t& v) const noexcept;
	bool not_equal(const int16_t& v) const noexcept;
	bool less_than(const int16_t& v) const noexcept;
	bool less_than_or_equal(const int16_t& v) const noexcept;
	bool greater_than(const int16_t& v) const noexcept;
	bool greater_than_or_equal(const int16_t& v) const noexcept;
	
	compare_result_t compare(const int16_t& v) const noexcept;
	
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_uint16_t {
	static T implicit_cast_uint16_t(uint16_t value) noexcept;
}

template <typename T>
interface __cast_from_uint16_t {
	static T cast_uint16_t(uint16_t value) noexcept;
}

__primitive uint16_t {
	static uint16_t implicit_cast_uint8_t(uint8_t value) noexcept;
	
	uint16_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint16_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint16_t<T>>
	T cast() const noexcept;

	uint16_t add(const uint16_t& v) const noexcept;
	uint16_t subtract(const uint16_t& v) const noexcept;
	uint16_t multiply(const uint16_t& v) const noexcept;
	uint16_t divide(const uint16_t& v) const noexcept;
	uint16_t modulo(const uint16_t& v) const noexcept;
	
	bool equal(const uint16_t& v) const noexcept;
	bool not_equal(const uint16_t& v) const noexcept;
	bool less_than(const uint16_t& v) const noexcept;
	bool less_than_or_equal(const uint16_t& v) const noexcept;
	bool greater_than(const uint16_t& v) const noexcept;
	bool greater_than_or_equal(const uint16_t& v) const noexcept;
	
	compare_result_t compare(const uint16_t& v) const noexcept;
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int32_t {
	static T implicit_cast_int32_t(int32_t value) noexcept;
}

template <typename T>
interface __cast_from_int32_t {
	static T cast_int32_t(int32_t value) noexcept;
}

__primitive int32_t {
	static int32_t implicit_cast_int8_t(int8_t value) noexcept;
	static int32_t implicit_cast_int16_t(int16_t value) noexcept;
	
	int32_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_int32_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_int32_t<T>>
	T cast() const noexcept;
	
	int32_t plus() const noexcept;
	int32_t minus() const noexcept;
	
	int32_t abs() const noexcept;

	int32_t add(const int32_t& v) const noexcept;
	int32_t subtract(const int32_t& v) const noexcept;
	int32_t multiply(const int32_t& v) const noexcept;
	int32_t divide(const int32_t& v) const noexcept;
	int32_t modulo(const int32_t& v) const noexcept;
	
	bool equal(const int32_t& v) const noexcept;
	bool not_equal(const int32_t& v) const noexcept;
	bool less_than(const int32_t& v) const noexcept;
	bool less_than_or_equal(const int32_t& v) const noexcept;
	bool greater_than(const int32_t& v) const noexcept;
	bool greater_than_or_equal(const int32_t& v) const noexcept;
	
	compare_result_t compare(const int32_t& v) const noexcept;
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_uint32_t {
	static T implicit_cast_uint32_t(uint32_t value) noexcept;
}

template <typename T>
interface __cast_from_uint32_t {
	static T cast_uint32_t(uint32_t value) noexcept;
}

__primitive uint32_t {
	static uint32_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static uint32_t implicit_cast_uint16_t(uint16_t value) noexcept;
	
	uint32_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint32_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint32_t<T>>
	T cast() const noexcept;

	uint32_t add(const uint32_t& v) const noexcept;
	uint32_t subtract(const uint32_t& v) const noexcept;
	uint32_t multiply(const uint32_t& v) const noexcept;
	uint32_t divide(const uint32_t& v) const noexcept;
	uint32_t modulo(const uint32_t& v) const noexcept;
	
	bool equal(const uint32_t& v) const noexcept;
	bool not_equal(const uint32_t& v) const noexcept;
	bool less_than(const uint32_t& v) const noexcept;
	bool less_than_or_equal(const uint32_t& v) const noexcept;
	bool greater_than(const uint32_t& v) const noexcept;
	bool greater_than_or_equal(const uint32_t& v) const noexcept;
	
	compare_result_t compare(const uint32_t& v) const noexcept;
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int64_t {
	static T implicit_cast_int64_t(int64_t value) noexcept;
}

template <typename T>
interface __cast_from_int64_t {
	static T cast_int64_t(int64_t value) noexcept;
}

__primitive int64_t {
	static int64_t implicit_cast_int8_t(int8_t value) noexcept;
	static int64_t implicit_cast_int16_t(int16_t value) noexcept;
	static int64_t implicit_cast_int32_t(int32_t value) noexcept;
	
	int64_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_int64_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_int64_t<T>>
	T cast() const noexcept;
	
	int64_t plus() const noexcept;
	int64_t minus() const noexcept;
	
	int64_t abs() const noexcept;

	int64_t add(const int64_t& v) const noexcept;
	int64_t subtract(const int64_t& v) const noexcept;
	int64_t multiply(const int64_t& v) const noexcept;
	int64_t divide(const int64_t& v) const noexcept;
	int64_t modulo(const int64_t& v) const noexcept;
	
	bool equal(const int64_t& v) const noexcept;
	bool not_equal(const int64_t& v) const noexcept;
	bool less_than(const int64_t& v) const noexcept;
	bool less_than_or_equal(const int64_t& v) const noexcept;
	bool greater_than(const int64_t& v) const noexcept;
	bool greater_than_or_equal(const int64_t& v) const noexcept;
	
	compare_result_t compare(const int64_t& v) const noexcept;
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_uint64_t {
	static T implicit_cast_uint64_t(uint64_t value) noexcept;
}

template <typename T>
interface __cast_from_uint64_t {
	static T cast_uint64_t(uint64_t value) noexcept;
}

__primitive uint64_t {
	static uint64_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static uint64_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static uint64_t implicit_cast_uint32_t(uint32_t value) noexcept;
	
	uint64_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint64_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint64_t<T>>
	T cast() const noexcept;

	uint64_t add(const uint64_t& v) const noexcept;
	uint64_t subtract(const uint64_t& v) const noexcept;
	uint64_t multiply(const uint64_t& v) const noexcept;
	uint64_t divide(const uint64_t& v) const noexcept;
	uint64_t modulo(const uint64_t& v) const noexcept;
	
	bool equal(const uint64_t& v) const noexcept;
	bool not_equal(const uint64_t& v) const noexcept;
	bool less_than(const uint64_t& v) const noexcept;
	bool less_than_or_equal(const uint64_t& v) const noexcept;
	bool greater_than(const uint64_t& v) const noexcept;
	bool greater_than_or_equal(const uint64_t& v) const noexcept;
	
	compare_result_t compare(const uint64_t& v) const noexcept;
	bool isZero() const noexcept;
}

template <typename T>
interface __implicit_cast_from_float_t {
	static T implicit_cast_float_t(float_t value) noexcept;
}

template <typename T>
interface __cast_from_float_t {
	static T cast_float_t(float_t value) noexcept;
}

__primitive float_t {
	static float_t cast_byte_t(byte_t value) noexcept;
	static float_t cast_ubyte_t(ubyte_t value) noexcept;
	static float_t cast_short_t(short_t value) noexcept;
	static float_t cast_ushort_t(ushort_t value) noexcept;
	static float_t cast_int_t(int_t value) noexcept;
	static float_t cast_uint_t(uint_t value) noexcept;
	static float_t cast_long_t(long_t value) noexcept;
	static float_t cast_ulong_t(ulong_t value) noexcept;
	static float_t cast_longlong_t(longlong_t value) noexcept;
	static float_t cast_ulonglong_t(ulonglong_t value) noexcept;
	static float_t cast_ssize_t(ssize_t value) noexcept;
	static float_t cast_size_t(size_t value) noexcept;
	
	static float_t cast_double_t(double_t value) noexcept;
	static float_t cast_longdouble_t(longdouble_t value) noexcept;
	
	float_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_float_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_float_t<T>>
	T cast() const noexcept;
	
	float_t plus() const noexcept;
	float_t minus() const noexcept;

	float_t abs() const noexcept;

	float_t add(const float_t& v) const noexcept;
	float_t subtract(const float_t& v) const noexcept;
	float_t multiply(const float_t& v) const noexcept;
	float_t divide(const float_t& v) const noexcept;
	float_t modulo(const float_t& v) const noexcept;
	
	bool equal(const float_t& v) const noexcept;
	bool not_equal(const float_t& v) const noexcept;
	bool less_than(const float_t& v) const noexcept;
	bool less_than_or_equal(const float_t& v) const noexcept;
	bool greater_than(const float_t& v) const noexcept;
	bool greater_than_or_equal(const float_t& v) const noexcept;
	
	compare_result_t compare(const float_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_double_t {
	static T implicit_cast_double_t(double_t value) noexcept;
}

template <typename T>
interface __cast_from_double_t {
	static T cast_double_t(double_t value) noexcept;
}

__primitive double_t {
	static double_t implicit_cast_float_t(float_t value) noexcept;
	
	static double_t cast_longdouble_t(longdouble_t value) noexcept;
	
	double_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_double_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_double_t<T>>
	T cast() const noexcept;
	
	double_t plus() const noexcept;
	double_t minus() const noexcept;
	
	double_t abs() const noexcept;

	double_t add(const double_t& v) const noexcept;
	double_t subtract(const double_t& v) const noexcept;
	double_t multiply(const double_t& v) const noexcept;
	double_t divide(const double_t& v) const noexcept;
	double_t modulo(const double_t& v) const noexcept;
	
	bool equal(const double_t& v) const noexcept;
	bool not_equal(const double_t& v) const noexcept;
	bool less_than(const double_t& v) const noexcept;
	bool less_than_or_equal(const double_t& v) const noexcept;
	bool greater_than(const double_t& v) const noexcept;
	bool greater_than_or_equal(const double_t& v) const noexcept;
	
	compare_result_t compare(const double_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_longdouble_t {
	static T implicit_cast_longdouble_t(longdouble_t value) noexcept;
}

template <typename T>
interface __cast_from_longdouble_t {
	static T cast_longdouble_t(longdouble_t value) noexcept;
}

__primitive longdouble_t {
	static longdouble_t implicit_cast_float_t(float_t value) noexcept;
	static longdouble_t implicit_cast_double_t(double_t value) noexcept;
	
	longdouble_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_longdouble_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_longdouble_t<T>>
	T cast() const noexcept;
	
	longdouble_t plus() const noexcept;
	longdouble_t minus() const noexcept;
	
	longdouble_t abs() const noexcept;

	longdouble_t add(const longdouble_t& v) const noexcept;
	longdouble_t subtract(const longdouble_t& v) const noexcept;
	longdouble_t multiply(const longdouble_t& v) const noexcept;
	longdouble_t divide(const longdouble_t& v) const noexcept;
	longdouble_t modulo(const longdouble_t& v) const noexcept;
	
	bool equal(const longdouble_t& v) const noexcept;
	bool not_equal(const longdouble_t& v) const noexcept;
	bool less_than(const longdouble_t& v) const noexcept;
	bool less_than_or_equal(const longdouble_t& v) const noexcept;
	bool greater_than(const longdouble_t& v) const noexcept;
	bool greater_than_or_equal(const longdouble_t& v) const noexcept;
	
	compare_result_t compare(const longdouble_t& v) const noexcept;
}

template <typename T>
interface __implicit_cast_from_ptrdiff_t {
	static T implicit_cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

template <typename T>
interface __cast_from_ptrdiff_t {
	static T cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

__primitive ptrdiff_t {
	static ptrdiff_t unit() noexcept;
	
	static ptrdiff_t implicit_cast_int8_t(int8_t value) noexcept;
	static ptrdiff_t implicit_cast_int16_t(int16_t value) noexcept;
	static ptrdiff_t implicit_cast_byte_t(byte_t value) noexcept;
	static ptrdiff_t implicit_cast_short_t(short_t value) noexcept;
	
	ptrdiff_t implicitCopy() const noexcept;
	
	template <typename T: __implicit_cast_from_ptrdiff_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ptrdiff_t<T>>
	T cast() const noexcept;
	
	ptrdiff_t add(const ptrdiff_t& v) const noexcept;
	ptrdiff_t subtract(const ptrdiff_t& v) const noexcept;
	ptrdiff_t multiply(const ptrdiff_t& v) const noexcept;
	ptrdiff_t divide(const ptrdiff_t& v) const noexcept;
	ptrdiff_t modulo(const ptrdiff_t& v) const noexcept;
	
	bool equal(const ptrdiff_t& v) const noexcept;
	bool not_equal(const ptrdiff_t& v) const noexcept;
	bool less_than(const ptrdiff_t& v) const noexcept;
	bool less_than_or_equal(const ptrdiff_t& v) const noexcept;
	bool greater_than(const ptrdiff_t& v) const noexcept;
	bool greater_than_or_equal(const ptrdiff_t& v) const noexcept;
	
	compare_result_t compare(const ptrdiff_t& v) const noexcept;
	
	bool isZero() const noexcept;
}

template <typename T>
__primitive __ptr {
	static __ptr<T> null() noexcept;
	
	__ptr<T> implicitCopy() const noexcept;
	
	// TODO: this should be const-templated once the compiler supports that.
	lval<T> ptr_lval<T> deref() const noexcept;
	
	// TODO: this should be const-templated once the compiler supports that.
	lval<T> ptr_lval<T> index(size_t index) const noexcept;
	
	__ptr<T> add(const ptrdiff_t& v) const noexcept;
	ptrdiff_t subtract(const __ptr<T>& v) const noexcept;
	
	bool equal(const __ptr<T>& value) const noexcept;
	bool not_equal(const __ptr<T>& value) const noexcept;
	bool less_than(const __ptr<T>& v) const noexcept;
	bool less_than_or_equal(const __ptr<T>& v) const noexcept;
	bool greater_than(const __ptr<T>& v) const noexcept;
	bool greater_than_or_equal(const __ptr<T>& v) const noexcept;
	
	int compare(const __ptr<T>& value) const noexcept;
}

template <typename T>
__primitive ptr_lval {
	T* address() noexcept;
	void assign(T value) noexcept;
	T& dissolve() const noexcept;
	
	void __set_value(T value) noexcept;
	T __extract_value() noexcept;
	void __destroy_value() noexcept;
}

template <typename T>
__primitive value_lval {
	static value_lval<T> create(T value) noexcept;
	T* address() noexcept;
	void assign(T value) noexcept;
	T& dissolve() const noexcept;
	T move() noexcept;
}

template <typename T>
__primitive member_lval {
	T* address() noexcept;
	void assign(T value) noexcept;
	T& dissolve() const noexcept;
}

template <typename T>
__primitive __ref {
	__ref<T> implicitCopy() const noexcept;
}

__primitive typename_t {
	typename_t implicitCopy() const noexcept;
}

/*
Eventually the following will be adopted for use (once compile-time evaluation
has been implemented). For now, this stuff is still built-in to the compiler.

__primitive method {
	typename returnType() const noexcept;
	typename[] paramTypes() const noexcept;
}

interface None { }

template <virtual typename Constraint_t = None>
__primitive typename {
	bool has_static_method(string name) const noexcept;
	method get_static_method(string name) const noexcept;
	
	bool has_dynamic_method(string name) const noexcept;
	method get_dynamic_method(string name) const noexcept;
	
	do (synthesizer) {
		// 'call' calls the default constructor, if any exists.
		if (!Constraint.has_static_method("default")) break;
		auto method = Constraint.get_static_method("default") const noexcept;
		synthesizer.add_dynamic_method(method.returnType(), "call", method.argTypes()) const noexcept;
	}
	
	do (synthesizer) {
		// All constructors can be called by
		// name, as methods of this object.
		for (auto method: Constraint.static_methods()) {
			if (synthesizer.has_method(method.name())) break;
			synthesizer.add_dynamic_method(method.returnType(), method.name(), method.argTypes()) const noexcept;
		}
	}
}

template <virtual typename Constraint_t = None>
__primitive virtual_typename {
	bool has_static_method(string name) const noexcept;
	method get_static_method(string name) const noexcept;
	
	bool has_dynamic_method(string name) const noexcept;
	method get_dynamic_method(string name) const noexcept;
}

template <typename T, typename Ret, typename[] Param>
class interface_method(T* objectPtr, void* vtable, uint32_t value) {
	static Create(T* objectPtr, void* vtable, uint32_t value) {
		return @(objectPtr, vtable, value) const noexcept;
	}
	
	interface_method<T, Ret, Param> implicitCopy() const {
		return interface_method(@objectPtr, @vtable, @value) const noexcept;
	}
	
	Ret call(Param args[]) const {
		auto vtableArray = static_array<void *>(@vtable) const noexcept;
		auto f = function_ptr<Ret, {T*} + Param>(
		f(@objectPtr, args) const noexcept;
	}
}*/


