export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		// TODO: use atomic counter.
		class shared_ptr(size_t* countField, T* ptr) {
			static create(T value) {
				return @(new_raw<size_t>(1u), std::new_raw<T>(move value));
			}
			
			static from_ptr(T* ptr) {
				return @(new_raw<size_t>(1u), ptr);
			}
			
			static null() noexcept {
				return @(null, null);
			}
			
			~ {
				if (@countField == null) {
					return;
				}
				
				(*@countField) -= 1u;		
				if (*@countField == 0u) {
					delete_raw<size_t>(@countField);
					delete_raw<T>(@ptr);
				}
			}
			
			shared_ptr<T> implicit_copy() const noexcept {
				(*@countField) += 1u;
				return @(@countField, @ptr);
			}
			
			lval<T> ptr_lval<T> deref() const noexcept {
				return *@ptr;
			}
		}
		
		template <typename T>
		shared_ptr<T> new_shared(T value) {
			return shared_ptr<T>::create(move value);
		}
		
	}
	
}

