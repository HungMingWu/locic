template <typename T>
interface __implicit_cast_from_ubyte_t {
	static T implicit_cast_ubyte_t(ubyte_t value) noexcept;
}

template <typename T>
interface __cast_from_ubyte_t {
	static T cast_ubyte_t(ubyte_t value) noexcept;
}

__primitive ubyte_t {
	static ubyte_t zero() noexcept;
	static ubyte_t leading_ones(size_t count) noexcept;
	static ubyte_t trailing_ones(size_t count) noexcept;
	
	static ubyte_t implicit_cast_uint8_t(uint8_t value) noexcept;
	
	static ubyte_t cast_uint16_t(uint16_t value) noexcept;
	static ubyte_t cast_uint32_t(uint32_t value) noexcept;
	static ubyte_t cast_uint_t(uint_t value) noexcept;
	
	ubyte_t implicit_copy() const noexcept;
	ubyte_t copy() const noexcept;
	
	template <typename T: __implicit_cast_from_ubyte_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ubyte_t<T>>
	T cast() const noexcept;
	
	ubyte_t add(const ubyte_t& v) const noexcept;
	ubyte_t subtract(const ubyte_t& v) const noexcept;
	ubyte_t multiply(const ubyte_t& v) const noexcept;
	ubyte_t divide(const ubyte_t& v) const noexcept;
	ubyte_t modulo(const ubyte_t& v) const noexcept;
	ubyte_t bitwise_and(const ubyte_t& v) const noexcept;
	ubyte_t bitwise_or(const ubyte_t& v) const noexcept;
	ubyte_t left_shift(const size_t& shift) const noexcept;
	ubyte_t right_shift(const size_t& shift) const noexcept;
	
	size_t count_leading_zeroes() const noexcept;
	size_t count_leading_ones() const noexcept;
	size_t count_trailing_zeroes() const noexcept;
	size_t count_trailing_ones() const noexcept;
	
	bool equal(const ubyte_t& v) const noexcept;
	bool not_equal(const ubyte_t& v) const noexcept;
	bool less_than(const ubyte_t& v) const noexcept;
	bool less_than_or_equal(const ubyte_t& v) const noexcept;
	bool greater_than(const ubyte_t& v) const noexcept;
	bool greater_than_or_equal(const ubyte_t& v) const noexcept;
	
	compare_result_t compare(const ubyte_t& v) const noexcept;
	
	bool isZero() const noexcept;
}
