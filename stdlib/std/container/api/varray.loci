
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Resizable array.
		 */
		template <typename T>
		class varray {
			static varray<T> create() noexcept;
			
			void reserve(size_t size);
			
			size_t capacity() const noexcept;
			
			void resize(size_t size);
			
			bool empty() const noexcept;
			
			T* data() const noexcept;
			
			size_t size() const noexcept;
			
			lval<T> ptr_lval<T> index(size_t index) const noexcept;
			
			void clear() noexcept;
			
			void push_back(T value);
			
			void pop_back() noexcept;
			
			// varray<T> copy() const <T: copyable<T>>;
			
			varray_range<T> all() const noexcept;
			
		}
		
		template <typename T>
		class varray_range {
			varray_range<T> implicitCopy() const noexcept;
			
			bool empty() const noexcept;
			
			void skip_front() noexcept;
			
			lval<T> ptr_lval<T> front() const noexcept;
			
			void skip_back() noexcept;
			
			lval<T> ptr_lval<T> back() const noexcept;
		}
		
	}
	
}

