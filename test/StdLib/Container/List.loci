// Test output.
import void testPrint(const byte * const str, ...) noexcept;

// Entry point.
export int testEntryPoint(int argc, byte ** argv) {
	auto list = std::list<int>();
	
	for (auto i: std::counter<int>(1, 0, 10)) {
		list.push_back(i);
	}
	
	testPrint(C"list.size() = %llu", list.size().toULongLong());
	testPrint(C"list.front() = %d", list.front());
	testPrint(C"list.back() = %d", list.back());
	
	testPrint(C"Print all values...");
	for (const auto& value: list.range()) {
		testPrint(C"    Value = %d", value);
	}
	
	testPrint(C"Pop front!");
	list.pop_front();
	
	testPrint(C"list.size() = %llu", list.size().toULongLong());
	testPrint(C"list.front() = %d", list.front());
	testPrint(C"list.back() = %d", list.back());
	
	testPrint(C"Print all values...");
	for (const auto& value: list.range()) {
		testPrint(C"    Value = %d", value);
	}
	
	testPrint(C"Pop back!");
	list.pop_back();
	
	testPrint(C"list.size() = %llu", list.size().toULongLong());
	testPrint(C"list.front() = %d", list.front());
	testPrint(C"list.back() = %d", list.back());
	
	testPrint(C"Print all values...");
	for (const auto& value: list.range()) {
		testPrint(C"    Value = %d", value);
	}
	
	testPrint(C"Push front!");
	list.push_front(-1);
	
	testPrint(C"list.size() = %llu", list.size().toULongLong());
	testPrint(C"list.front() = %d", list.front());
	testPrint(C"list.back() = %d", list.back());
	
	testPrint(C"Print all values...");
	for (const auto& value: list.range()) {
		testPrint(C"    Value = %d", value);
	}
	
	return 0;
}

