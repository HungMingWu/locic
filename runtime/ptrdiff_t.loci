template <typename T>
interface __implicit_cast_from_ptrdiff_t {
	static T implicit_cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

template <typename T>
interface __cast_from_ptrdiff_t {
	static T cast_ptrdiff_t(ptrdiff_t value) noexcept;
}

__primitive ptrdiff_t {
	static ptrdiff_t unit() noexcept;
	
	static ptrdiff_t implicit_cast_int8_t(int8_t value) noexcept;
	static ptrdiff_t implicit_cast_int16_t(int16_t value) noexcept;
	static ptrdiff_t implicit_cast_byte_t(byte_t value) noexcept;
	static ptrdiff_t implicit_cast_short_t(short_t value) noexcept;
	
	static ptrdiff_t cast_size_t(size_t value) noexcept;
	
	ptrdiff_t implicit_copy() const noexcept;
	ptrdiff_t copy() const noexcept;
	
	template <typename T: __implicit_cast_from_ptrdiff_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_ptrdiff_t<T>>
	T cast() const noexcept;
	
	ptrdiff_t add(const ptrdiff_t& v) const noexcept;
	ptrdiff_t subtract(const ptrdiff_t& v) const noexcept;
	ptrdiff_t multiply(const ptrdiff_t& v) const noexcept;
	ptrdiff_t divide(const ptrdiff_t& v) const noexcept;
	ptrdiff_t modulo(const ptrdiff_t& v) const noexcept;
	
	bool equal(const ptrdiff_t& v) const noexcept;
	bool not_equal(const ptrdiff_t& v) const noexcept;
	bool less_than(const ptrdiff_t& v) const noexcept;
	bool less_than_or_equal(const ptrdiff_t& v) const noexcept;
	bool greater_than(const ptrdiff_t& v) const noexcept;
	bool greater_than_or_equal(const ptrdiff_t& v) const noexcept;
	
	compare_result_t compare(const ptrdiff_t& v) const noexcept;
	
	bool isZero() const noexcept;
}
