export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		class shared_ptr(size_t* countField, T* ptr) {
			static create(T value) {
				return @(new_raw<size_t>(1), std::new_raw<T>(move value));
			}
			
			static from_ptr(T* ptr) {
				return @(new_raw<size_t>(1), ptr);
			}
			
			static null() {
				return @(null, null);
			}
			
			~ {
				if (@countField == null) {
					return;
				}
				
				(*@countField)--;		
				if(*@countField == 0){
					delete_raw<size_t>(@countField);
					delete_raw<T>(@ptr);
				}
			}
			
			shared_ptr<T> implicitCopy() {
				(*@countField)++;
				return @(@countField, @ptr);
			}
			
			lval<T> ptr_lval<T> deref() const {
				return *@ptr;
			}
		}
		
	}
	
}

