import std.string 0.1.0 {
	
	std::string string_literal(const ubyte* const stringConstant);
	
	namespace std {
		
		exception out_of_range();
		
		/**
		 * \brief String
		 * 
		 * This class represents a disjoint (i.e. potentially non-contiguous)
		 * sequence of unicode characters. Strings are immutable, hence all
		 * 'mutating' methods return a new string with the specified modifications.
		 */
		class string {
			/**
			 * \brief Constructs an empty string.
			 * 
			 * \return An empty string.
			 */
			static string create();
			
			/**
			 * \brief Constructs a string using a UTF-8 encoded null-terminated
			 *        C-string constant.
			 * 
			 * \return A string containing the given string constant.
			 */
			static string cstring(const ubyte* const stringConstant);
			
			/**
			 * \brief Implicitly copy this string.
			 * 
			 * \return A string representing a copy of this string.
			 */
			string implicit_copy() const;
			
			/**
			 * \brief Explicitly copy this string.
			 * 
			 * \return A string representing a copy of this string.
			 */
			string copy() const;
			
			/**
			 * \brief Concatenate two strings.
			 * 
			 * \param The string to concatenate to this string.
			 * \return A string containing the concatenated contents of
			 *         this string and the given string.
			 */
			string add(const string& other) const;
			
			/**
			 * \brief Get substring.
			 * 
			 * \param The range for which to get a substring.
			 * \return The substring.
			 */
			string substr(string_range range) const;
			
			/**
			 * \brief Get range of the whole string.
			 * 
			 * \return Range of the whole string.
			 */
			string_range all() const;
			
			/**
			 * \brief Get string contents length (number of unicode characters).
			 * 
			 * \return The string contents length.
			 */
			size_t length() const noexcept;
			
			/**
			 * \brief Compare this string with the given string.
			 * 
			 * \return The result of comparing the strings lexicographically.
			 */
			compare_result_t compare(const string& other) const noexcept;
			
			/**
			 * \brief Create a UTF-8 buffer for the string.
			 * 
			 * This function is typically used to create C strings from std::string.
			 * 
			 * \return A UTF-8 buffer equivalent of the string.
			 */
			utf8_buffer make_buffer() const;
		}
		
		class string_lval {
			unichar dissolve() const;
		}
		
	}
	
}

