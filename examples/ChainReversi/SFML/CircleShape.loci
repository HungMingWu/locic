// Workaround for the fact locic doesn't
// yet support opaque types.
struct sfCircleShape { };

import {
	
	sfCircleShape* sfCircleShape_create() noexcept;
	
	sfCircleShape* sfCircleShape_copy(const sfCircleShape* const shape) noexcept;
	
	void sfCircleShape_destroy(sfCircleShape* shape) noexcept;
	
	void sfCircleShape_setOrigin(sfCircleShape* shape, sfVector2f origin) noexcept;
	
	void sfCircleShape_setPosition(sfCircleShape* shape, sfVector2f position) noexcept;
	
	void sfCircleShape_setRotation(sfCircleShape* shape, float angle) noexcept;
	
	void sfCircleShape_setScale(sfCircleShape* shape, sfVector2f scale) noexcept;
	
	void sfCircleShape_setFillColor(sfCircleShape* shape, sfColor color) noexcept;
	
	void sfCircleShape_setRadius(sfCircleShape* shape, float radius) noexcept;
	
}

namespace sf {
	
	class CircleShape(sfCircleShape* shape) {
		static Create () {
			return @(sfCircleShape_create());
		}
		
		CircleShape copy() const {
			return @(sfCircleShape_copy(@shape));
		}
		
		~ {
			sfCircleShape_destroy(@shape);
		}
		
		sfCircleShape* raw() const {
			return @shape;
		}
		
		void setOrigin(Vector2f position) {
			sfCircleShape_setOrigin(@shape, sfVector2f(position.x, position.y));
		}
		
		void setPosition(Vector2f position) {
			sfCircleShape_setPosition(@shape, sfVector2f(position.x, position.y));
		}
		
		void setRotation(float angle) {
			sfCircleShape_setRotation(@shape, angle);
		}
		
		void setScale(Vector2f scale) {
			sfCircleShape_setScale(@shape, sfVector2f(scale.x, scale.y));
		}
		
		void setFillColor(Color color) {
			sfCircleShape_setFillColor(@shape, sfColor(color.r, color.g, color.b, color.a));
		}
		
		void setRadius(float radius) {
			sfCircleShape_setRadius(@shape, radius);
		}
		
	}
	
}


