__primitive int16_t {
	static int16_t implicit_cast_int8_t(int8_t value) noexcept;
	
	int16_t implicit_copy() const noexcept;
	int16_t copy() const noexcept;
	
	int16_t plus() const noexcept;
	int16_t minus() const noexcept;
	
	int16_t abs() const noexcept;

	int16_t add(const int16_t& v) const noexcept;
	int16_t subtract(const int16_t& v) const noexcept;
	int16_t multiply(const int16_t& v) const noexcept;
	int16_t divide(const int16_t& v) const noexcept;
	int16_t modulo(const int16_t& v) const noexcept;
	
	bool equal(const int16_t& v) const noexcept;
	bool not_equal(const int16_t& v) const noexcept;
	bool less_than(const int16_t& v) const noexcept;
	bool less_than_or_equal(const int16_t& v) const noexcept;
	bool greater_than(const int16_t& v) const noexcept;
	bool greater_than_or_equal(const int16_t& v) const noexcept;
	
	compare_result_t compare(const int16_t& v) const noexcept;
	
	bool isZero() const noexcept;
	bool isPositive() const noexcept;
	bool isNegative() const noexcept;
}

template <typename T>
interface __implicit_cast_from_int16_t {
	static T implicit_cast_int16_t(int16_t value) noexcept;
}

template <typename T>
interface __cast_from_int16_t {
	static T cast_int16_t(int16_t value) noexcept;
}

template <typename T: __implicit_cast_from_int16_t<T>>
T int16_t::implicitCast() const noexcept {
	return T.implicit_cast_int16_t(self);
}

template <typename T: __cast_from_int16_t<T>>
T int16_t::cast() const noexcept {
	return T.cast_int16_t(self);
}
