
import std.container 0.1.0 {
	
	namespace std {
	
		/**
		 * \brief Queue
		 */
		template <typename T>
		class queue {
			static queue<T> create() noexcept;
			
			void reserve(size_t size);
			
			size_t capacity() const noexcept;
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept;
			
			lval<T> ptr_lval<T> front() const noexcept;
			
			lval<T> ptr_lval<T> back() const noexcept;
			
			void push(T value);
			
			void pop() noexcept;
			
			queue_range<T> range() const noexcept;
			
		}
		
		template <typename T>
		class queue_range {
			queue_range<T> implicitCopy() const noexcept;
			
			bool empty() const noexcept;
			
			void skip_front() noexcept;
			
			lval<T> ptr_lval<T> front() const noexcept;
		}
		
	}
	
}

