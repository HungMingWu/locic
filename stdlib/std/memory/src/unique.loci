export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		class unique_ptr(T* ptr) {
			static create(T value) {
				return @(new_raw<T>(move value));
			}
			
			static null() noexcept {
				return @(null);
			}
			
			~ {
				if (@ptr != null) {
					delete_raw<T>(@ptr);
				}
			}
			
			lval<T> ptr_lval<T> deref() const noexcept {
				return *@ptr;
			}
			
			T* get() noexcept {
				return @ptr;
			}
			
			void reset(T* pointer) noexcept {
				if (@ptr != null) {
					delete_raw<T>(@ptr);
				}
				@ptr = pointer;
			}
			
			T* release() noexcept {
				T* pointer = @ptr;
				@ptr = null;
				return pointer;
			}
		}
		
		template <typename T>
		unique_ptr<T> new_unique(T value) {
			return unique_ptr<T>::create(move value);
		}
		
	}
	
}

