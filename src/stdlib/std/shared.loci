
template <typename T>
class shared(shared_ptr<T> ptr){
	static default(T value) {
		return @(new<shared_ptr>(value));
	}
	
	shared<T> implicitCopy() const {
		return @(@ptr);
	}
	
	T& forward() const {
		return *@ptr;
	}
};

template <typename T>
shared<T> new_shared(T value){
	return shared<T>(value);
}

template <typename T>
class shared_ptr(size_t* countField, T* ptr){
	static default(T value) {
		return @(new<raw_ptr>(cast<size_t>(1)), new<raw_ptr>(value));
	}

	~{
		(*@countField)--;		
		if(*@countField == 0){
			delete<raw_ptr>(@countField);
			delete<raw_ptr>(@ptr);
		}
	}
	
	shared_ptr<T> implicitCopy() const {
		(*@countField)++;
		return @(@countField, @ptr);
	}

	lvalue(T) deref() const {
		return *@ptr;
	}
};

template <typename T>
shared_ptr<T> new_shared_ptr(T value){
	return shared_ptr<T>(value);
}

