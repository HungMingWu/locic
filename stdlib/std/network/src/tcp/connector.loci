export std.network 0.1.0 {
	
	namespace std {
		
		namespace tcp {
			
			class connector(int handle, endpoint peer) {
				static create(endpoint dest) {
					const int handle = std_tcp_socket();
					if (handle < 0) {
						throw socket_failed(-handle);
					}
					
					scope (failure) {
						std_tcp_close(handle);
					}
					
					{
						const int result = std_tcp_setnonblocking(handle, 1);
						if (result < 0) {
							throw setnonblocking_failed(-result);
						}
					}
					
					{
						const int result = std_tcp_setipv6only(handle, 0);
						if (result < 0) {
							throw setipv6only_failed(-result);
						}
					}
					
					{
						const int result = std_tcp_setnosigpipe(handle, 1);
						if (result < 0) {
							throw setnosigpipe_failed(-result);
						}
					}
					
					{
						const auto encodedAddress = encodeAddress(dest.address);
						const int result = std_tcp_connect(handle, &encodedAddress, dest.port);
						if (result < 0 && !isInProgress(result)) {
							throw connect_failed(-result);
						}
					}
					
					return @(handle, dest);
				}
				
				~ {
					if (@handle >= 0) {
						std_tcp_close(@handle);
					}
				}
				
				int _release() noexcept {
					assert @handle >= 0;
					const int tmp = @handle;
					@handle = -1;
					return tmp;
				}
				
				event::source event_source() const noexcept {
					assert @handle >= 0;
					const bool waitForRead = false;
					const bool waitForWrite = true;
					return event::source._handle(@handle, waitForRead, waitForWrite);
				}
				
				endpoint peer() const noexcept {
					return @peer;
				}
				
				bool check() {
					assert @handle >= 0;
					return self.event_source().poll();
				}
				
				bool _ready() const {
					assert @handle >= 0;
					return self.event_source().poll();
				}
			}
			
			stream connector_wait(connector conn) {
				conn.event_source().wait();
				assert conn._ready();
				return connector_get(move conn);
			}
			
			stream connector_get(connector conn) {
				assert conn._ready();
				const int handle = conn._release();
				scope (failure) {
					std_tcp_close(handle);
				}
				
				{
					const int result = std_tcp_geterror(handle);
					if (result < 0) {
						throw geterror_failed(-result);
					} else if (result > 0) {
						throw connect_failed(result);
					}
				}
				
				return stream._create(handle, conn.peer());
			}
			
		}
		
	}
	
}

