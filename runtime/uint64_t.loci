template <typename T>
interface __implicit_cast_from_uint64_t {
	static T implicit_cast_uint64_t(uint64_t value) noexcept;
}

template <typename T>
interface __cast_from_uint64_t {
	static T cast_uint64_t(uint64_t value) noexcept;
}

__primitive uint64_t {
	static uint64_t implicit_cast_uint8_t(uint8_t value) noexcept;
	static uint64_t implicit_cast_uint16_t(uint16_t value) noexcept;
	static uint64_t implicit_cast_uint32_t(uint32_t value) noexcept;
	
	uint64_t implicit_copy() const noexcept;
	uint64_t copy() const noexcept;
	
	template <typename T: __implicit_cast_from_uint64_t<T>>
	T implicitCast() const noexcept;
	
	template <typename T: __cast_from_uint64_t<T>>
	T cast() const noexcept;

	uint64_t add(const uint64_t& v) const noexcept;
	uint64_t subtract(const uint64_t& v) const noexcept;
	uint64_t multiply(const uint64_t& v) const noexcept;
	uint64_t divide(const uint64_t& v) const noexcept;
	uint64_t modulo(const uint64_t& v) const noexcept;
	
	bool equal(const uint64_t& v) const noexcept;
	bool not_equal(const uint64_t& v) const noexcept;
	bool less_than(const uint64_t& v) const noexcept;
	bool less_than_or_equal(const uint64_t& v) const noexcept;
	bool greater_than(const uint64_t& v) const noexcept;
	bool greater_than_or_equal(const uint64_t& v) const noexcept;
	
	compare_result_t compare(const uint64_t& v) const noexcept;
	bool isZero() const noexcept;
}
